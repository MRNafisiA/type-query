{
  "include": ["./src"],
  "exclude": ["./node_modules","./dist","./tests"],
  "compilerOptions": {

    /* Type Checking */
    "strict": true,                                         /* Enable all strict type-checking options. */
    //  "alwaysStrict": true,                               /* Ensure 'use strict' is always emitted. */
    //  "noImplicitAny": true,                              /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    //  "noImplicitThis": true,                             /* Enable error reporting when 'this' is given the type 'any'. */
    //  "strictNullChecks": true,                           /* When type checking, take into account 'null' and 'undefined'. */
    //  "strictBindCallApply": true,                        /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
    //  "strictFunctionTypes": true,                        /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    //  "strictPropertyInitialization": true,               /* Check for class properties that are declared but not set in the constructor. */
    //  "useUnknownInCatchVariables": true,                 /* Default catch clause variables as 'unknown' instead of 'any'. */
    "noUnusedLocals": true,                                 /* Enable error reporting when local variables aren't read. */
    "noImplicitReturns": true,                              /* Enable error reporting for codepaths that do not explicitly return in a function. */
    "noUnusedParameters": true,                             /* Raise an error when a function parameter isn't read. */
    "noImplicitOverride": true,                             /* Ensure overriding members in derived classes are marked with an override modifier. */
    "exactOptionalPropertyTypes": true,                     /* Interpret optional property types as written, rather than adding 'undefined'. */
    "noFallthroughCasesInSwitch": true,                     /* Enable error reporting for fallthrough cases in switch statements. */
    //  "allowUnusedLabels": false,                         /* Disable error reporting for unused labels. */
    //  "allowUnreachableCode": false,                      /* Disable error reporting for unreachable code. */
    //  "noUncheckedIndexedAccess": false,                  /* Add 'undefined' to a type when accessed using an index. */
    //  "noPropertyAccessFromIndexSignature": false,        /* Enforces using indexed accessors for keys declared using an indexed type. */

    /* Modules */
    "module": "commonjs",                                   /* Specify what module code is generated. */
    "moduleResolution": "node",                             /* Specify how TypeScript looks up a file from a given module specifier. */
    "allowUmdGlobalAccess": true,                           /* Allow accessing UMD globals from modules. */
    "resolveJsonModule": true,                              /* Enable importing .json files. */
    "rootDir": "./src",                                     /* Specify the root folder within your source files. */
    //  "noResolve": false,                                 /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */
    //  "baseUrl": "",                                      /* Specify the base directory to resolve non-relative module names. */
    //  "paths": {},                                        /* Specify a set of entries that re-map imports to additional lookup locations. */
    //  "types": [],                                        /* Specify type package names to be included without being referenced in a source file. */
    //  "rootDirs": [],                                     /* Allow multiple folders to be treated as one when resolving modules. */
    //  "typeRoots": [],                                    /* Specify multiple folders that act like './node_modules/@types'. */

    /* Emit */
    "declaration": true,                                    /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    "declarationMap": true,                                 /* Create sourcemaps for d.ts files. */
    "outDir": "./dist",                                     /* Specify an output folder for all emitted files. */
    "sourceMap": true,                                      /* Create source map files for emitted JavaScript files. */
    //  "noEmit": false,                                    /* Disable emitting files from a compilation. */
    //  "emitBOM": false,                                   /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    //  "importHelpers": false,                             /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    //  "inlineSources": false,                             /* Include source code in the sourcemaps inside the emitted JavaScript. */
    //  "noEmitOnError": false,                             /* Disable emitting files if any type checking errors are reported. */
    //  "noEmitHelpers": false,                             /* Disable generating custom helper functions like '__extends' in compiled output. */
    //  "stripInternal": false,                             /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
    //  "removeComments": false,                            /* Disable emitting comments. */
    //  "inlineSourceMap": false,                           /* Include sourcemap files inside the emitted JavaScript. */
    //  "downlevelIteration": false,                        /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    //  "preserveConstEnums": true, (isolatedModules)       /* Disable erasing 'const enum' declarations in generated code. */
    //  "emitDeclarationOnly": false,                       /* Only output d.ts files and not JavaScript files. */
    //  "preserveValueImports": false,                      /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */
    //  "mapRoot": "",                                      /* Specify the location where debugger should locate map files instead of generated locations. */
    //  "outFile": "",                                      /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
    //  "sourceRoot": "",                                   /* Specify the root path for debuggers to find the reference source code. */
    //  "declarationDir": "",                               /* Specify the output directory for generated declaration files. */
    //  "importsNotUsedAsValues": "remove",                 /* Specify emit/checking behavior for imports that are only used for types. */
    //  "newLine": "crlf | lf",                             /* Set the newline character for emitting files. */

    /* JavaScript Support */
    "allowJs": true,                                        /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
    "checkJs": true,                                        /* Enable error reporting in type-checked JavaScript files. */
    //  "maxNodeModuleJsDepth": 0,                          /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

    /* Editor Support */
    "disableSizeLimit": true,                               /* Remove the 20mb cap on total source code size for JavaScript files in the TypeScript language server. */
    //  "plugins":  [],                                     /* Specify a list of language service plugins to include. */

    /* Interop Constraints */
    "isolatedModules": true,                                /* Ensure that each file can be safely transpiled without relying on other imports. */
    "esModuleInterop": true,                                /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
    "allowSyntheticDefaultImports": true,                   /* Allow 'import x from y' when a module doesn't have a default export. */
    "forceConsistentCasingInFileNames": true,               /* Ensure that casing is correct in imports. */
    //  "preserveSymlinks": false,                          /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */

    /* Backwards Compatibility */
    //  "noImplicitUseStrict": false,                       /* Disable adding 'use strict' directives in emitted JavaScript files. */
    //  "noStrictGenericChecks": false,                     /* Disable strict checking of generic signatures in function types. */
    //  "suppressExcessPropertyErrors": false,              /* Disable reporting of excess property errors during the creation of object literals. */
    //  "suppressImplicitAnyIndexErrors": false,            /* Suppress `noImplicitAny` errors when indexing objects that lack index signatures. */

    /* Language and Environment */
    "target": "ES5",                                        /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    "lib": ["ES2021"],                                      /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    //  "noLib": false,                                     /* Disable including any library files, including the default lib.d.ts. */
    //  "emitDecoratorMetadata": false,                     /* Emit design-type metadata for decorated declarations in source files. */
    //  "experimentalDecorators": false,                    /* Enable experimental support for TC39 stage 2 draft decorators. */
    //  "useDefineForClassFields": false,                   /* Emit ECMAScript-standard-compliant class fields. */
    //  "jsx": "react",                                     /* Specify what JSX code is generated. */
    //  "jsxFragmentFactory": "",                           /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    //  "reactNamespace": "React",                          /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
    //  "jsxImportSource": "react",                         /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
    //  "jsxFactory": "React.createElement",                /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */

    /* Compiler Diagnostics */
    //  "explainFiles": false,                              /* Print names of files which TypeScript sees as a part of your project and the reason they are part of the compilation. */
    //  "extendedDiagnostics": false,                       /* Output more detailed compiler performance information after building. */
    //  "generateCpuProfile": "",                           /* Emit a v8 CPU profile of the compiler run for debugging. */
    //  "listEmittedFiles": false,                          /* Print the names of emitted files after a compilation. */
    //  "listFiles": false,                                 /* Print all the files read during the compilation. */
    //  "traceResolution": false,                           /* Enable tracing of the name resolution process. Requires TypeScript version 2.0 or later. */

    /* Projects */
    //  "incremental": false,                               /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
    //  "composite": false,                                 /* Enable constraints that allow a TypeScript project to be used with project references. */
    //  "tsBuildInfoFile": "",                              /* Specify the path to .tsbuildinfo incremental compilation file. */
    //  "disableSourceOfProjectReferenceRedirect": false,   /* Disable preferring source files instead of declaration files when referencing composite projects. */
    //  "disableSolutionSearching": false,                  /* Opt a project out of multi-project reference checking when editing. */
    //  "disableReferencedProjectLoad": false,              /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Output Formatting */
    //  "noErrorTruncation": false,                         /* Disable truncating types in error messages. */
    //  "preserveWatchOutput": true,                        /* Disable wiping the console in watch mode. */
    //  "pretty": true,                                     /* Enable color and formatting in output to make compiler errors easier to read. */

    /* Completeness */
    "skipLibCheck": true,                                   /* Skip type checking all .d.ts files. */

    /* Watch Options */
    "assumeChangesOnlyAffectDirectDependencies": true       /* Have recompiles in '--incremental' and '--watch' assume that changes within a file will only affect files directly depending on it. Requires TypeScript version 3.8 or later. */
  }
}